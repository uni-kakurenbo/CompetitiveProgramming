{
	"extension.string": {
		"scope": "cpp",
		"prefix": "def.ex.string",
		"body": [
			"namespace extensions {",
			"\tusing namespace std;",
			"\tstruct string : std::string {",
			"\t\tusing std::string::string;",
			"\t\tchar& operator[] (int64_t index) {",
			"\t\t\tif(index >= 0) return basic_string::operator[](index);",
			"\t\t\telse return basic_string::operator[](this->size() + index);",
			"\t\t}",
			"\t};",
			"}"
		]
	},
	"shortcut.algorithm.BFS/DFS": {
		"prefix": "short.algo.bfs/dfs",
		"body": [
			"${1|queue,stack|}<${3:int}> que;",
			"vector<${4:int}> dists(n, -1);\n",
			"que.push(${5:0}), dists[$5] = 0;\n",
			"while(!que.empty()) {",
			"\t$3 v = que.${2|front,top|}(); que.pop();",
			"\tfor($3 nv : G[v]) {",
			"\t\tif(dists[nv] >= 0) continue;",
			"\t\tdists[nv] = dists[v] + 1;",
			"\t\tque.push(nv);",
			"\t}",
			"}",
		],
		"description": ""
	},
	"structure.Matrix.noraml": {
		"scope": "cpp",
		"prefix": "struct.matrix.normal",
		"body": [
			"template <class T = int> struct Matrix : vector<vector<T>> {",
			"\tMatrix(size_t h, size_t w, T init = T()) : vector<vector<T>> (h, vector<T> (w, init)) {}",
			"\tinline T& operator()(size_t i, size_t j) { return (*this)[i][j]; }",
			"};"
		]
	},
	"structure.Matrix.extra.Transpose": {
		"scope": "cpp",
		"prefix": "struct.matrix.ex.transpose",
		"body": [
			"template<class T> Matrix<T>* Matrix<T>::transpose() {",
			"\tMatrix<T> res(width, height);",
			"\tfor(size_t i=0; i<height; ++i) for(size_t j=0; j<width; ++j) res[j][i] = (*this)(i,j);",
			"\t*this = res;",
			"\treturn this;",
			"}"
		],
	},
	"structure.Matrix.unfolded": {
		"scope": "cpp",
		"prefix": "struct.matrix.unfolded",
		"body": [
			"template <class T = int> struct UnfoldedMatrix : vector<T> {",
			"\tUnfoldedMatrix(size_t h = 0, size_t w = 0, T init = T()) : vector<T> (h*w, init), height(h), width(w), buffer_size(h*w) {};",
			"\tinline T& operator()(size_t i, size_t j) { return (*this)[i*width+j]; }",
			"  private:",
			"\tsize_t height, width, buffer_size;",
			"};"
		]
	},
	"shortcut.MeguruBinarySearch": {
		"prefix": "meguru_bin_search",
		"body": [
			"${1:int} ng = ${2:-1}, ok = ${3:n};",
			"while (abs(ok-ng) > 1) {",
			"\t$1 mid = (ok+ng) / 2;",
			"\t(${4:is_satisfied(mid)} ? ok : ng) = mid;",
			"}",
		],
	},
    "shortcut.interval_scanner": {
        "prefix": [ "interval_scanner", "shakutori_method" ],
        "body": [
            "auto validate = [&](auto) { return true; };",
            "auto init = [&]() { };",
            "auto valid = [&]() { return; };",
            "auto expand = [&](auto val) { };",
            "auto contract = [&](auto val) { };",
            "auto apply = [&](auto l, auto r) { chmax(ans, r - l); };",
            "",
            "InclusiveIntervalScanner<> scanner(validate, init, valid, expand, contract, apply);",
            "scanner.scan_all(ALL());",
            "",
        ],
        "description": ""
    },
	"shortcut.reduce.vector": {
		"scope": "cpp",
		"prefix": "red.vec",
		"body": [
			"reduce(ALL(${1:vec}), ${2:0}, [](${3:int} &a, $3 &b) { return ${4:max(a, b)}; })"
		]
	},
	"shortcut.include.atcoder": {
		"scope": "cpp",
		"prefix": "ac-library",
		"body": [
			"#include <atcoder/${1:modint}>",
			"using namespace atcoder;"
		]
	},
	"shortcut.include.modint": {
		"prefix": "short.inc.modint",
		"body": [
			"#include <atcoder/modint>",
			"using mint = atcoder::modint${1|998244353,1000000007|};"
		],
	},
	"shortcut.ForEach": {
		"scope": "cpp",
		"prefix": "foreach",
		"body": [
			"for(const ${1:auto}& ${2:i}:${3:I})"
		],
		"description": "Iteration by element"
	},
	"shortcut.cout": {
		"scope": "cpp",
		"prefix": "cout",
		"body": [
			"cout << ${1:ans} << \"\\n\";"
		],
		"description": ""
	},
	"shortcut.output.YesNo": {
		"scope": "cpp",
		"prefix": "yesno",
		"body": [
			"(${1:true} ? ${2|\"Yes\" : \"No\",\"YES\" : \"NO\",\"yes\" : \"no\"|})"
		],
		"description": ""
	},
	"shortcut.output.fill": {
		"scope": "cpp",
		"prefix": "fill",
		"body": [
			" setfill('${1:0}') << setw(${2:16}) <<"
		],
		"description": ""
	},
	"shortcut.output.alignment_of_decimal_places": {
		"scope": "cpp",
		"prefix": "shortcut.fixed_prec",
		"body": [
			" fixed << setprecision(${16}) <<"
		],
		"description": ""
	},
	"shortcut.output.printf": {
		"scope": "cpp",
		"prefix": "printf;",
		"body": [
			"printf(\"${1:%lli}${2:\\n}\", $3);"
		],
		"description": ""
	},
	"shortcut.extensions::string": {
		"scope": "cpp",
		"prefix": "ex::string",
		"body": [
			"extensions::string"
		]
	},
	"shortcut.in_range.open": {
		"scope": "cpp",
		"prefix": "open_range",
		"body": [
			"${1:a} < ${2:x} && $2 < ${3:b}"
		]
	},
	"shortcut.in_range.closed": {
		"scope": "cpp",
		"prefix": "closed_range",
		"body": [
			"${1:a} <= ${2:x} && $2 <= ${3:b}"
		]
	},
	"shortcut.declaration.PriorityQueue": {
		"scope": "cpp",
		"prefix": "dec.prique",
		"body": [
			"priority_queue<${1:int},${2|vector,deque|}<$1>,${3|less,greater|}<$1>>"
		]
	},
	"shortcut.declaration.vector": {
		"scope": "cpp",
		"prefix": "dec.vec",
		"body": [
			"vector<${1:int}> ${2:a}(${3:n});"
		]
	},
	"shortcut.input.vector": {
		"scope": "cpp",
		"prefix": "input.rep_vec",
		"body": [
			"REP(${1:i}, ${2:n}) cin >> ${3:a}[$1];"
		]
	},
	"define.constant.MOD": {
		"scope": "cpp",
		"prefix": "def.const.MOD",
		"body": [
			"#define MOD 1000000007"
		],
		"description": "Definition of MOD number"
	},
	"map": {
		"scope": "python",
		"prefix": "mapped",
		"body": [
			"map(${1:int}, input().split())"
		]
	},
	"input.split": {
		"scope": "python",
		"prefix": "splitted",
		"body": [
			"input().split()"
		]
	},
	"input": {
		"scope": "python",
		"prefix": "input",
		"body": [
			"${1:int}(input())"
		]
	},
	"YesNo": {
		"scope": "python",
		"prefix": "yesno",
		"body": [
			"\"${2:Yes}\" if ${1:True} else \"${3:No}\""
		]
	},
	"enumerate": {
		"scope": "python",
		"prefix": "enumerate",
		"body": [
			"enumerate(${1:a})"
		]
	}
}
